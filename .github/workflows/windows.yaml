name: Build AppFlowy Windows

on:
  workflow_dispatch:
    inputs:
      repo:
        description: "Repo"
        required: true
        default: "AppFlowy-IO/AppFlowy"
      branch:
        description: "Branch"
        required: true
        default: "main"
      build_name:
        description: "Build Version (it should match the version in pubspec.yaml)"
        required: true
        default: "0.9.4"
      internal_build:
        type: choice
        description: "Internal Build Type (1 for internal, 0 for external)"
        required: true
        default: "1"
        options:
          - "0"
          - "1"
  workflow_call:
    inputs:
      repo:
        description: "Repo"
        required: true
        type: string
      branch:
        description: "Branch"
        required: true
        type: string
      build_name:
        description: "Build Version"
        required: true
        type: string
      internal_build:
        description: "Internal Build Type"
        required: true
        type: string

env:
  FLUTTER_VERSION: "3.27.4"
  RUST_TOOLCHAIN: "1.85.0"

jobs:
  build:
    env:
      WINDOWS_APP_RELEASE_PATH: frontend\appflowy_flutter\product\${{ inputs.build_name }}\windows
      WINDOWS_ZIP_NAME: AppFlowy-${{ inputs.build_name }}-windows-x86_64.zip
      WINDOWS_INSTALLER_NAME: AppFlowy-${{ inputs.build_name }}-windows-x86_64

    runs-on: windows-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.branch }}
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          cache: true
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: x86_64-pc-windows-msvc
          override: true
          components: rustfmt
          profile: minimal

      - uses: davidB/rust-cargo-make@v1
        with:
          version: "0.37.5"

      - name: Install prerequisites
        working-directory: frontend
        run: |
          vcpkg integrate install
          cargo install duckscript_cli --force --locked

      - name: Generate env file
        working-directory: frontend/appflowy_flutter
        run: |
          echo "INTERNAL_BUILD=${{ inputs.internal_build }}" >> .env
        shell: bash

      - name: Configure Git credentials for Cargo
        shell: bash
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true
        run: |
          git config --global credential.helper store
          echo "https://${{ secrets.ADMIN_GITHUB_TOKEN }}:x-oauth-basic@github.com" > ~/.git-credentials
          git config --global url."https://${{ secrets.ADMIN_GITHUB_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"


      - name: Build Windows app
        working-directory: frontend
        # the cargo make script has to be run separately because of file locking issues
        run: |
          flutter config --enable-windows-desktop
          dart ./scripts/flutter_release_build/build_flowy.dart exclude-directives . ${{ inputs.build_name }}
          cargo make --env APP_VERSION=${{ inputs.build_name }} --profile production-windows-x86 appflowy
          dart ./scripts/flutter_release_build/build_flowy.dart include-directives . ${{ inputs.build_name }}

      - name: Archive Asset
        uses: vimtor/action-zip@v1
        with:
          files: ${{ env.WINDOWS_APP_RELEASE_PATH }}\
          dest: ${{ env.WINDOWS_APP_RELEASE_PATH }}\${{ env.WINDOWS_ZIP_NAME }}

      - name: Copy installer config & icon file
        working-directory: frontend
        run: |
          cp scripts/windows_installer/* ../${{ env.WINDOWS_APP_RELEASE_PATH }}

      - name: Build installer executable
        working-directory: ${{ env.WINDOWS_APP_RELEASE_PATH }}
        run: |
          iscc /F${{ env.WINDOWS_INSTALLER_NAME }} inno_setup_config.iss /DAppVersion=${{ inputs.build_name }}

      - name: Upload EXE
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WINDOWS_INSTALLER_NAME }}.exe
          path: ${{ env.WINDOWS_APP_RELEASE_PATH }}\Output\${{ env.WINDOWS_INSTALLER_NAME }}.exe

      - name: Upload ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WINDOWS_ZIP_NAME }}
          path: ${{ env.WINDOWS_APP_RELEASE_PATH }}/${{ env.WINDOWS_ZIP_NAME }}

  notify-failure:
    runs-on: ubuntu-latest
    needs: build
    if: failure()
    steps:
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            ðŸ”´ðŸ”´ðŸ”´ Workflow ${{ github.workflow }} in repository ${{ github.repository }} was failed ðŸ”´ðŸ”´ðŸ”´.
          fields: repo,message,author,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
