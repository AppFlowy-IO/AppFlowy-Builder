name: Build AppFlowy Linux

on:
  workflow_dispatch:
    inputs:
      repo:
        description: "Repo"
        required: true
        default: "AppFlowy-IO/AppFlowy"
      branch:
        description: "Branch"
        required: true
        default: "main"
      build_name:
        description: "Build Version (it should match the version in pubspec.yaml)"
        required: true
        default: "0.8.2"
      internal_build:
        type: choice
        description: "Internal Build Type (1 for internal, 0 for external)"
        required: true
        default: "1"
        options:
          - 0
          - 1

env:
  FLUTTER_VERSION: "3.27.4"
  RUST_TOOLCHAIN: "1.80.1"

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-22.04]
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}
    env:
      LINUX_APP_RELEASE_PATH: frontend/appflowy_flutter/build/${{ github.event.inputs.build_name }}
      LINUX_ZIP_NAME: AppFlowy-${{ github.event.inputs.build_name }}-linux-x86_64.zip
      LINUX_PACKAGE_DEB_NAME: AppFlowy-${{ github.event.inputs.build_name }}-linux-x86_64.deb
      LINUX_PACKAGE_RPM_NAME: AppFlowy-${{ github.event.inputs.build_name }}-linux-x86_64.rpm

    steps:
      # the following step is required to avoid running out of space
      - name: Maximize build space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: ${{ github.event.inputs.branch }}

      - name: Install Rust toolchain
        id: rust_toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      - name: Install flutter
        id: flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.os }}
          workspaces: |
            frontend/rust-lib

      - uses: davidB/rust-cargo-make@v1
        with:
          version: "0.37.5"

      - name: Install prerequisites
        working-directory: frontend
        run: |
          sudo wget -qO /etc/apt/trusted.gpg.d/dart_linux_signing_key.asc https://dl-ssl.google.com/linux/linux_signing_key.pub
          sudo apt-get update
          sudo apt-get install -y build-essential libsqlite3-dev libssl-dev clang cmake ninja-build pkg-config libgtk-3-dev
          sudo apt-get install keybinder-3.0 libnotify-dev libwayland-cursor0 libwayland-client0 libwayland-egl1
          sudo apt-get -y install alien
          sudo apt install libmpv-dev mpv
          source $HOME/.cargo/env
          cargo install duckscript_cli --force --locked
          rustup target add ${{ matrix.target }}
        shell: bash

      - name: Generate env file
        working-directory: frontend/appflowy_flutter
        run: |
          echo "INTERNAL_BUILD=${{ github.env.inputs.internal_build }}" >> .env
        shell: bash

      - name: Build AppFlowy
        working-directory: frontend
        run: |
          flutter config --enable-linux-desktop
          dart ./scripts/flutter_release_build/build_flowy.dart run . ${{ github.event.inputs.build_name }}
          dart pub global activate flutter_distributor
          ./scripts/flutter_release_build/build_linux.sh --build_type all --build_arch x86_64 --version ${{ github.event.inputs.build_name }}

      - name: Upload ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LINUX_ZIP_NAME }}
          path: ${{ env.LINUX_APP_RELEASE_PATH }}/${{ env.LINUX_ZIP_NAME }}

      - name: Upload RPM
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LINUX_PACKAGE_RPM_NAME }}
          path: ${{ env.LINUX_APP_RELEASE_PATH }}/${{ env.LINUX_PACKAGE_RPM_NAME }}

      - name: Upload DEB
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LINUX_PACKAGE_DEB_NAME }}
          path: ${{ env.LINUX_APP_RELEASE_PATH }}/${{ env.LINUX_PACKAGE_DEB_NAME }}

  notify-failure:
    runs-on: ubuntu-latest
    needs: build
    if: failure()
    steps:
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            ðŸ”´ðŸ”´ðŸ”´ Workflow ${{ github.workflow }} in repository ${{ github.repository }} was failed ðŸ”´ðŸ”´ðŸ”´.
          fields: repo,message,author,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
