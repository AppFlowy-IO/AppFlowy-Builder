name: Build AppFlowy Application

on:
  push:
    tags:
      - "*"

env:
  FLUTTER_VERSION: "3.27.4"
  RUST_TOOLCHAIN: "1.84.0"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.parse_tag.outputs.version }}
      branch_name: ${{ steps.parse_tag.outputs.branch_name }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Parse Tag
        id: parse_tag
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=$(echo "$TAG_NAME" | cut -f1 -d"_")
          BRANCH_NAME=$(echo "$TAG_NAME" | cut -f2- -d"_")
          if [ -z "$BRANCH_NAME" ]; then
            echo "Error: BRANCH_NAME is empty. The tag name should be in the format of <version>_<branch_name>"
            exit 1
          fi
          echo $VERSION
          echo $BRANCH_NAME
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=branch_name::$BRANCH_NAME"

      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          repository: AppFlowy-IO/AppFlowy
          ref: ${{ steps.parse_tag.outputs.branch_name }}

      - name: Create release notes
        id: create_release_notes
        run: |
          RELEASE_NOTES=$(cat CHANGELOG.md | sed -e '/./{H;$!d;}' -e "x;/##\ Version\ ${{ steps.parse_tag.outputs.version }}/"'!d;')
          echo "::set-output name=release_notes::$RELEASE_NOTES"
        shell: bash

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.parse_tag.outputs.version }}
          body: ${{ steps.create_release_notes.outputs.release_notes }}

  build-for-windows:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    needs: prepare
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: x86_64-pc-windows-msvc, os: windows-latest }
    env:
      WINDOWS_APP_RELEASE_PATH: frontend\appflowy_flutter\product\${{ needs.prepare.outputs.version }}\windows
      WINDOWS_INSTALLER_NAME: AppFlowy-${{ needs.prepare.outputs.version }}-windows-x86_64

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          repository: AppFlowy-IO/AppFlowy
          ref: ${{ needs.prepare.outputs.branch_name }}

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: ${{ matrix.job.target }}
          override: true
          components: rustfmt
          profile: minimal

      - uses: davidB/rust-cargo-make@v1
        with:
          version: "0.37.5"

      - name: Install prerequisites
        working-directory: frontend
        run: |
          vcpkg integrate install
          cargo install duckscript_cli --force --locked

      - name: Build Windows app
        working-directory: frontend
        # the cargo make script has to be run separately because of file locking issues
        run: |
          dart ./scripts/flutter_release_build/build_flowy.dart exclude-directives . ${{ needs.prepare.outputs.version }}
          cargo make --env APP_VERSION=${{ needs.prepare.outputs.version }} --profile production-windows-x86 appflowy
          dart ./scripts/flutter_release_build/build_flowy.dart include-directives . ${{ needs.prepare.outputs.version }}

      - name: Copy installer config & icon file
        working-directory: frontend
        run: |
          cp scripts/windows_installer/* ../${{ env.WINDOWS_APP_RELEASE_PATH }}

      - name: Build installer executable
        working-directory: ${{ env.WINDOWS_APP_RELEASE_PATH }}
        run: |
          iscc /F${{ env.WINDOWS_INSTALLER_NAME }} inno_setup_config.iss /DAppVersion=${{ needs.prepare.outputs.version }}

      - name: Upload Installer Asset
        id: upload-installer-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: ${{ env.WINDOWS_APP_RELEASE_PATH }}\Output\${{ env.WINDOWS_INSTALLER_NAME }}.exe
          asset_name: ${{ env.WINDOWS_INSTALLER_NAME }}.exe
          asset_content_type: application/octet-stream

  build-for-macOS:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: aarch64-apple-darwin, os: macos-latest }
    env:
      MACOS_APP_RELEASE_PATH: frontend/appflowy_flutter/product/${{ needs.prepare.outputs.version }}/macos/Release
      MACOS_DMG_NAME: AppFlowy_${{ github.ref_name }}_macos-universal
      MACOS_CODESIGN_ID: ${{ secrets.MACOS_CODESIGN_ID }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          repository: AppFlowy-IO/AppFlowy
          ref: ${{ needs.prepare.outputs.branch_name }}

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: ${{ matrix.job.target }}
          override: true
          components: rustfmt
          profile: minimal

      - name: Install prerequisites
        working-directory: frontend
        run: |
          cargo install cargo-make --force --locked --version 0.37.5
          cargo install duckscript_cli --force --locked

      - name: Build AppFlowy
        working-directory: frontend
        run: |
          flutter config --enable-macos-desktop
          dart ./scripts/flutter_release_build/build_flowy.dart run . ${{ needs.prepare.outputs.version }}

      - name: Check for Code signing ID
        run: |
          if [ -z "${{ env.MACOS_CODESIGN_ID }}" ]; then
            echo "MACOS_CODESIGN_ID is not set. Skipping code signing step."
          else
            echo "MACOS_CODESIGN_ID is set. Proceeding with code signing."
          fi

      - name: Codesign AppFlowy
        run: |
          echo ${{ secrets.MACOS_CERTIFICATE_BASE64 }} | base64 --decode > certificate.p12
          security create-keychain -p action build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p action build.keychain
          security import certificate.p12 -k build.keychain -P ${{ secrets.P12_PASSWORD }} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k action build.keychain
          /usr/bin/codesign --force --options runtime --deep --sign "${{ secrets.MACOS_CODESIGN_ID }}" "${{ env.MACOS_APP_RELEASE_PATH }}/AppFlowy.app" -v

      - name: Create macOS dmg
        run: |
          brew install create-dmg
          create-dmg \
          --volname ${{ env.MACOS_DMG_NAME }} \
          --hide-extension "AppFlowy.app" \
          --background frontend/scripts/dmg_assets/AppFlowyInstallerBackground.jpg \
          --window-size 600 450 \
          --icon-size 94 \
          --icon "AppFlowy.app" 141 249 \
          --app-drop-link 458 249 \
          "${{ env.MACOS_APP_RELEASE_PATH }}/${{ env.MACOS_DMG_NAME }}.dmg" \
          "${{ env.MACOS_APP_RELEASE_PATH }}/AppFlowy.app"

      - name: Notarize AppFlowy
        continue-on-error: true
        run: |
          xcrun notarytool submit ${{ env.MACOS_APP_RELEASE_PATH }}/${{ env.MACOS_DMG_NAME }}.dmg --apple-id ${{ secrets.MACOS_NOTARY_USER }} --team-id ${{ secrets.MACOS_TEAM_ID }} --password ${{ secrets.MACOS_NOTARY_PWD }} -v -f "json" --wait

      - name: Upload DMG Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: ${{ env.MACOS_APP_RELEASE_PATH }}/${{ env.MACOS_DMG_NAME }}.dmg
          asset_name: ${{ env.MACOS_DMG_NAME }}.dmg
          asset_content_type: application/octet-stream

  build-for-linux:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              arch: x86_64,
              target: x86_64-unknown-linux-gnu,
              os: ubuntu-latest,
              flutter_profile: production-linux-x86_64,
            }
    env:
      LINUX_APP_RELEASE_PATH: frontend/appflowy_flutter/product/${{ needs.prepare.outputs.version }}/linux/Release
      LINUX_PACKAGE_DEB_NAME: AppFlowy-${{ needs.prepare.outputs.version }}-linux-x86_64.deb
      LINUX_PACKAGE_RPM_NAME: AppFlowy-${{ needs.prepare.outputs.version }}-linux-x86_64.rpm
      LINUX_PACKAGE_TMP_RPM_NAME: AppFlowy-${{ needs.prepare.outputs.version }}-2.x86_64.rpm
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          repository: AppFlowy-IO/AppFlowy
          ref: ${{ needs.prepare.outputs.branch_name }}

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: ${{ matrix.job.target }}
          override: true
          components: rustfmt
          profile: minimal

      - name: Install prerequisites
        working-directory: frontend
        run: |
          sudo wget -qO /etc/apt/trusted.gpg.d/dart_linux_signing_key.asc https://dl-ssl.google.com/linux/linux_signing_key.pub
          sudo apt-get update
          sudo apt-get install -y build-essential libsqlite3-dev libssl-dev clang cmake ninja-build pkg-config libgtk-3-dev libcurl4-openssl-dev
          sudo apt-get install keybinder-3.0 libnotify-dev
          sudo apt-get -y install alien
          sudo apt install libmpv-dev mpv
          source $HOME/.cargo/env
          cargo install cargo-make --force --locked --version 0.37.5
          cargo install duckscript_cli --force --locked
          rustup target add ${{ matrix.job.target }}

      - name: Install gcc-aarch64-linux-gnu
        if: ${{ matrix.job.target == 'aarch64-unknown-linux-gnu' }}
        working-directory: frontend
        run: |
          sudo apt-get install -qy binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libgtk-3-0

      - name: Build AppFlowy
        working-directory: frontend
        run: |
          flutter config --enable-linux-desktop
          cargo make --env APP_VERSION=${{ needs.prepare.outputs.version }} --profile production-linux-x86_64 appflowy

      - name: Build Linux package (.deb)
        working-directory: frontend
        run: |
          sh scripts/linux_distribution/deb/build_deb.sh appflowy_flutter/product/${{ needs.prepare.outputs.version }}/linux/Release ${{ needs.prepare.outputs.version }} ${{ env.LINUX_PACKAGE_DEB_NAME }}

      - name: Build Linux package (.rpm)
        working-directory: ${{ env.LINUX_APP_RELEASE_PATH }}
        run: |
          sudo alien -r ${{ env.LINUX_PACKAGE_DEB_NAME }}
          cp -r ${{ env.LINUX_PACKAGE_TMP_RPM_NAME }} ${{ env.LINUX_PACKAGE_RPM_NAME }}

      - name: Upload Debian package
        id: upload-release-asset-install-package-deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: ${{ env.LINUX_APP_RELEASE_PATH }}/${{ env.LINUX_PACKAGE_DEB_NAME }}
          asset_name: ${{ env.LINUX_PACKAGE_DEB_NAME }}
          asset_content_type: application/octet-stream

      - name: Upload Debian package
        id: upload-release-asset-install-package-rpm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: ${{ env.LINUX_APP_RELEASE_PATH }}/${{ env.LINUX_PACKAGE_RPM_NAME }}
          asset_name: ${{ env.LINUX_PACKAGE_RPM_NAME }}
          asset_content_type: application/octet-stream

  notify-failure:
    runs-on: ubuntu-latest
    needs: [build-for-linux, build-for-windows, build-for-macOS]
    if: failure()
    steps:
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            🔴🔴🔴Workflow ${{ github.workflow }} in repository ${{ github.repository }} was failed 🔴🔴🔴.
          fields: repo,message,author,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.RELEASE_SLACK_WEBHOOK }}
        if: always()

  notify-slack:
    runs-on: ubuntu-latest
    needs: [build-for-linux, build-for-windows, build-for-macOS]
    steps:
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Workflow ${{ github.workflow }} in repository ${{ github.repository }} has completed.
            Check the release package at https://github.com/${{ github.repository }}/releases/tag/${{ github.ref }}
          fields: repo,message,commit,author,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
